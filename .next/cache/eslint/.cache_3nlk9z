[{"/Users/keithdyer/Code/JessicaParty/pages/_app.tsx":"1","/Users/keithdyer/Code/JessicaParty/pages/admin.tsx":"2","/Users/keithdyer/Code/JessicaParty/pages/api/socket.ts":"3","/Users/keithdyer/Code/JessicaParty/pages/index.tsx":"4","/Users/keithdyer/Code/JessicaParty/components/AdminLogin/index.tsx":"5","/Users/keithdyer/Code/JessicaParty/components/JoinGame/index.tsx":"6","/Users/keithdyer/Code/JessicaParty/components/Layout/index.tsx":"7","/Users/keithdyer/Code/JessicaParty/components/PlayerBoard/index.tsx":"8","/Users/keithdyer/Code/JessicaParty/components/QuestionBoard/index.tsx":"9","/Users/keithdyer/Code/JessicaParty/components/RoundBoard/index.tsx":"10","/Users/keithdyer/Code/JessicaParty/components/ScoringBoard/index.tsx":"11","/Users/keithdyer/Code/JessicaParty/components/SideBar/index.tsx":"12"},{"size":814,"mtime":1659670258013,"results":"13","hashOfConfig":"14"},{"size":11922,"mtime":1661553869238,"results":"15","hashOfConfig":"14"},{"size":9772,"mtime":1661553858889,"results":"16","hashOfConfig":"14"},{"size":3572,"mtime":1661547132872,"results":"17","hashOfConfig":"14"},{"size":1402,"mtime":1661495512084,"results":"18","hashOfConfig":"14"},{"size":1398,"mtime":1661495802851,"results":"19","hashOfConfig":"14"},{"size":737,"mtime":1661531768012,"results":"20","hashOfConfig":"14"},{"size":1369,"mtime":1661491174178,"results":"21","hashOfConfig":"14"},{"size":3438,"mtime":1661544712181,"results":"22","hashOfConfig":"14"},{"size":780,"mtime":1661489329583,"results":"23","hashOfConfig":"14"},{"size":5544,"mtime":1661524719793,"results":"24","hashOfConfig":"14"},{"size":911,"mtime":1661458080387,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"51skvu",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"/Users/keithdyer/Code/JessicaParty/pages/_app.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/pages/admin.tsx",["65"],[],"/Users/keithdyer/Code/JessicaParty/pages/api/socket.ts",[],[],"/Users/keithdyer/Code/JessicaParty/pages/index.tsx",["66"],[],"import { useEffect, useState } from 'react'\nimport io from 'Socket.IO-client'\nimport PlayerBoard from '../components/PlayerBoard'\nimport JoinGame from '../components/JoinGame'\nimport RoundBoard from '../components/RoundBoard';\n\n\nconst Home = () => {\n  const [gameAvailable, setGameAvailable] = useState(true);\n  const [players, setPlayers] = useState([]);\n  const [joined, setJoined] = useState(false);\n  const [teamName, setTeamName] = useState('');\n  const [round, setRound] = useState({});\n  const [socket, setSocket] = useState(null);\n  const [hasSubmit, setHasSubmit] = useState(false);\n  const [hasJoker, setHasJoker] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n\n  useEffect(() => { {\n    socketInitializer();\n  }}, [gameAvailable, players, joined, round])\n\n  const socketInitializer = async () => {\n\n    await fetch('/api/socket');\n    socket = io()\n\n    socket.once('game-unavailable', msg => {\n      setGameAvailable(msg);\n    })\n\n    socket.once('players', msg => {\n      setPlayers(msg);\n    })\n\n    socket.once('update-round', msg => {\n      while(round.questions?.length > 0) round.questions.pop()\n      console.log(round)\n      setRound({...round, description: msg});\n    })\n\n    socket.once('close-round', msg => {\n      round.questions = round.questions?.map((s:any) => { return {...s, reveal: true}});\n      setRound({...round});\n    })\n\n    socket.once('next-question', msg => {\n      setRound({...round, questions: msg});\n      setHasSubmit(false);\n    })\n\n    socket.once('game-over', msg => {\n      setGameOver(true);\n      round.questions = [];\n      round.description = null;\n      setRound({...round});\n    })\n    setSocket(socket);\n  }\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setTeamName(e.currentTarget.value);\n  const joinGame = (e) => {\n    socket.emit('join-game', teamName);\n    setJoined(true);\n  }\n  const submitAnswers = (answers, joker) => {\n    if(joker && !hasJoker) {\n      socket.emit('submit-questions', {name: teamName, a: answers, joker: true});\n      setHasJoker(true);\n    } else {\n      socket.emit('submit-questions', {name: teamName, a: answers, joker: false});\n    }\n    setHasSubmit(true);\n  }\n\n  return (\n    <div>\n      <div className='font-[Optima] text-3xl text-center py-10 px-10'>\n        <div>{'Jessica\\'s 30th Birthday Trivia!'}</div>\n      </div>\n      {\n          (!gameAvailable && !joined) ?           \n          <div className='flex place-content-center'>\n            <div className='flex flex-col w-full'>\n              <div className='flex place-content-center place-items-end md:mt-20 w-full'>\n                <div className='font-[Optima] text-6xl text-center'>Waiting for host...</div>\n              </div>\n            </div> \n          </div>\n            : \n          (!joined) ?\n          <JoinGame input={teamName} handleChange={handleChange} joinGame={joinGame}/>\n            :\n          (gameOver) \n            ?\n            <div><div className='text-center'>Those are the final scores!</div><div className='text-center mt-5'>Happy birthday!</div></div>\n            :\n          (round.description == null) \n            ? \n            <div className='text-center'>Please wait...</div> \n            :\n            <div></div>\n      }\n      {\n        (joined) \n          ? \n          <div>\n            <RoundBoard round= {round} submitAnswers = {submitAnswers} hasSubmit = {hasSubmit} hasJoker = {hasJoker} />\n            <PlayerBoard players={players} />\n          </div>\n          : \n        <div></div>\n      }\n    </div>\n  )\n}\n\nexport default Home;","/Users/keithdyer/Code/JessicaParty/components/AdminLogin/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/JoinGame/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/Layout/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/PlayerBoard/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/QuestionBoard/index.tsx",["67"],[],"\nimport Image from 'next/image'\nimport React, { useState } from 'react';\n\ntype Question = {\n    q: string,\n    a: string,\n    reveal: boolean,\n    info: {\n        type: string,\n        url: string,\n        last: boolean\n    }\n}\n\nconst QuestionBoard = ( {questions, submitAnswers, hasSubmit, hasJoker} : {questions:Question[], submitAnswers:any, hasSubmit:any, hasJoker:any}) => {\n    const [answers, setAnswers] = useState([]);\n\n    const submitRegular = () => {\n        submitAnswers(answers, false);\n        setAnswers([]);\n    };\n    const submitJoker = () => {\n        submitAnswers(answers, true);\n        setAnswers([]);\n    };\n\n    const handleChange = (e: React.FormEvent<HTMLInputElement>) => { \n        answers[e.target.id] = e.target.value;\n    }\n\n    return (\n    <div className='px-5 py-5'>\n    {\n        questions !== undefined ?\n        <div>\n            { questions.map((s:any, i) => <div key={i}>\n                { (s.info.type == 'image') ?\n                <div className='text-center py-3 w-full h-full'>\n                    <Image src={s.info.url} width={400} height={400}/>    \n                </div>\n                 :\n                <div className='text-center text-xl py-2'>\n                    {s.q}\n                </div>\n                }\n                <div className={`bg-google-gray border-gray-700 border rounded-3xl w-full h-12 hover:bg-gray-700 focus-within:bg-gray-700`}>\n                { (s.reveal) \n                    ? \n                    <div className='flex w-full h-full'>\n                        <input className='bg-inherit rounded-3xl focus:outline-none pl-10 w-full text-green-600 text-xl italic' id={i.toString()} type='text' value={s.a} spellCheck=\"false\"></input>\n                    </div>\n                    : \n                    <div className='flex w-full h-full'>\n                        <input className='text-white bg-inherit rounded-3xl focus:outline-none pl-10 w-full' id={i.toString()} type='text' value={answers[i]} onChange={handleChange} spellCheck=\"false\"></input>\n                    </div>\n                }\n                </div>\n            </div>) }\n            { questions.some((s) => s?.info?.last === true) && !hasSubmit ?\n             (!hasJoker) ? \n             <div>\n                <div className=\"text-center mx-10 mt-5\">\n                    <button type='submit' className='bg-green-700 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-3xl transition-all duration-200 hover:rounded-xl ease-linear active:bg-green-900 mt-2 md:mt-0' onClick={submitRegular}>Submit Answers</button>\n                </div> \n                <div className=\"text-center mx-10 mt-5\">\n                    <button type='submit' className='bg-blue-700 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-3xl transition-all duration-200 hover:rounded-xl ease-linear active:bg-blue-900 mt-2 md:mt-0' onClick={submitJoker}>Submit Joker (2x)!</button>\n                </div> \n             </div> :\n            <div className=\"text-center mx-10 mt-5\">\n                <button type='submit' className='bg-green-700 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-3xl transition-all duration-200 hover:rounded-xl ease-linear active:bg-green-900 mt-2 md:mt-0' onClick={submitRegular}>Submit Answers</button>\n            </div> \n                : \n            <div></div> }\n        </div>\n        : <div></div>\n    }\n    </div>\n    );\n};\n\nexport default QuestionBoard;","/Users/keithdyer/Code/JessicaParty/components/RoundBoard/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/ScoringBoard/index.tsx",[],[],"/Users/keithdyer/Code/JessicaParty/components/SideBar/index.tsx",["68"],[],"import styles from './SideBar.module.css'\nimport Link from 'next/link'\n\nconst SideBar = () => {\n    return (\n        <div className={styles.SideBar}>\n            {/* <SideBarIcon icon = {<FaHome size=\"28\" />} text='Home' link='/' />\n            <SideBarIcon icon = {<FaChartLine size=\"32\" />} text='Price & Availability Trends' link='/trends' />\n            <SideBarIcon icon = {<FaUserAlt size=\"20\" />} text='Account' link='/account' />\n            <SideBarIcon icon = {<FaCog size=\"20\" />} text='Settings' link='/settings' /> */}\n        </div>\n    );\n\n};\n\nconst SideBarIcon = ({icon, text = 'tooltip', link = '/'} : {icon:any, text:string, link:string}) => (\n    <Link href={link}>\n        <div className={styles.SideBarIcon + ' group'}>\n            {icon}\n            <span className={styles.SideBarTooltip + ' group-hover:scale-100'}> {text} </span>\n        </div>  \n    </Link>\n);\n\nexport default SideBar;",{"ruleId":"69","severity":1,"message":"70","line":100,"column":44,"nodeType":"71","endLine":100,"endColumn":62,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"70","line":22,"column":7,"nodeType":"71","endLine":22,"endColumn":46,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":40,"column":21,"nodeType":"76","endLine":40,"endColumn":71},{"ruleId":"77","severity":1,"message":"78","line":17,"column":5,"nodeType":"76","endLine":17,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socketInitializer'. Either include it or remove the dependency array.","ArrayExpression",["79"],["80"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [players, answers, socketInitializer]",{"range":"85","text":"86"},"Update the dependencies array to be: [gameAvailable, players, joined, round, socketInitializer]",{"range":"87","text":"88"},[6276,6294],"[players, answers, socketInitializer]",[749,788],"[gameAvailable, players, joined, round, socketInitializer]"]